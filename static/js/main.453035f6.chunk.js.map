{"version":3,"sources":["assets/snake-graphics.png","contexts/SettingsContext.jsx","utils/level.utils.js","hooks/useLevel.jsx","hooks/useCanvas.jsx","components/Level.jsx","hooks/useInterval.jsx","components/Game.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","SettingsContext","createContext","SettingsContextProvider","children","Provider","value","levelSettings","size","tileSize","drawSnakeOnLevel","levelSize","levelTileSize","levelGraphics","levelGraphicsTileSize","drawingContext","snake","i","length","segment","segx","segy","tilex","tiley","tx","ty","nseg","pseg","drawImage","drawAppleOnLevel","apple","useLevel","useImage","levelGraphicsPath","bind","useCanvas","canvasSize","canvasTileSize","callback","canvasRef","useRef","useEffect","context","current","getContext","setTransform","clearRect","Level","useContext","drawSnake","drawApple","ref","width","height","useInterval","delay","savedCallback","id","setInterval","clearInterval","DIRECTIONS","38","40","37","39","SNAKE_START","APPLE_START","DIRECTION_START","Game","useState","setSnake","setApple","direction","setDirection","speed","setSpeed","gameStarted","setGameStarted","handleChangeSnakeDirection","keyCode","hasCollidedWithSnakeBody","block","currentSnake","run","obj","newSnake","JSON","parse","stringify","newSnakeHead","unshift","newApple","map","_","Math","floor","random","createApple","pop","className","tabIndex","role","onKeyDown","style","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.453035f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snake-graphics.f20532e3.png\";","import React, { createContext } from \"react\"\r\n\r\nconst SettingsContext = createContext({})\r\n\r\nconst SettingsContextProvider = ({ children }) => {\r\n  const levelSettings = {\r\n    size: [640, 640],\r\n    tileSize: 32,\r\n  }\r\n\r\n  return (\r\n    <SettingsContext.Provider value={{ levelSettings }}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  )\r\n}\r\n\r\nexport { SettingsContext, SettingsContextProvider }\r\n","// more details on https://rembound.com/articles/creating-a-snake-game-tutorial-with-html5\r\n\r\nexport const drawSnakeOnLevel = (\r\n  levelSize,\r\n  levelTileSize,\r\n  levelGraphics,\r\n  levelGraphicsTileSize,\r\n  drawingContext,\r\n  snake\r\n) => {\r\n  // Loop over every snake segment\r\n  for (var i = 0; i < snake.length; i++) {\r\n    var segment = snake[i]\r\n    var segx = segment[0]\r\n    var segy = segment[1]\r\n    var tilex = segx * levelTileSize\r\n    var tiley = segy * levelTileSize\r\n\r\n    // Sprite column and row that gets calculated\r\n    var tx = 0\r\n    var ty = 0\r\n\r\n    if (i === 0) {\r\n      // Head; Determine the correct image\r\n      var nseg = snake[i + 1] // Next segment\r\n      if (segy < nseg[1]) {\r\n        // Up\r\n        tx = 3\r\n        ty = 0\r\n      } else if (segx > nseg[0]) {\r\n        // Right\r\n        tx = 4\r\n        ty = 0\r\n      } else if (segy > nseg[1]) {\r\n        // Down\r\n        tx = 4\r\n        ty = 1\r\n      } else if (segx < nseg[0]) {\r\n        // Left\r\n        tx = 3\r\n        ty = 1\r\n      }\r\n    } else if (i === snake.length - 1) {\r\n      // Tail; Determine the correct image\r\n      var pseg = snake[i - 1] // Prev segment\r\n      if (pseg[1] < segy) {\r\n        // Up\r\n        tx = 3\r\n        ty = 2\r\n      } else if (pseg[0] > segx) {\r\n        // Right\r\n        tx = 4\r\n        ty = 2\r\n      } else if (pseg[1] > segy) {\r\n        // Down\r\n        tx = 4\r\n        ty = 3\r\n      } else if (pseg[0] < segx) {\r\n        // Left\r\n        tx = 3\r\n        ty = 3\r\n      }\r\n    } else {\r\n      // Body; Determine the correct image\r\n      var pseg = snake[i - 1] // Previous segment\r\n      var nseg = snake[i + 1] // Next segment\r\n      if (\r\n        (pseg[0] < segx && nseg[0] > segx) ||\r\n        (nseg[0] < segx && pseg[0] > segx)\r\n      ) {\r\n        // Horizontal Left-Right\r\n        tx = 1\r\n        ty = 0\r\n      } else if (\r\n        (pseg[0] < segx && nseg[1] > segy) ||\r\n        (nseg[0] < segx && pseg[1] > segy)\r\n      ) {\r\n        // Angle Left-Down\r\n        tx = 2\r\n        ty = 0\r\n      } else if (\r\n        (pseg[1] < segy && nseg[1] > segy) ||\r\n        (nseg[1] < segy && pseg[1] > segy)\r\n      ) {\r\n        // Vertical Up-Down\r\n        tx = 2\r\n        ty = 1\r\n      } else if (\r\n        (pseg[1] < segy && nseg[0] < segx) ||\r\n        (nseg[1] < segy && pseg[0] < segx)\r\n      ) {\r\n        // Angle Top-Left\r\n        tx = 2\r\n        ty = 2\r\n      } else if (\r\n        (pseg[0] > segx && nseg[1] < segy) ||\r\n        (nseg[0] > segx && pseg[1] < segy)\r\n      ) {\r\n        // Angle Right-Up\r\n        tx = 0\r\n        ty = 1\r\n      } else if (\r\n        (pseg[1] > segy && nseg[0] > segx) ||\r\n        (nseg[1] > segy && pseg[0] > segx)\r\n      ) {\r\n        // Angle Down-Right\r\n        tx = 0\r\n        ty = 0\r\n      }\r\n    }\r\n\r\n    if (levelGraphics) {\r\n      // Draw the image of the snake part\r\n      drawingContext.drawImage(\r\n        levelGraphics,\r\n        tx * levelGraphicsTileSize,\r\n        ty * levelGraphicsTileSize,\r\n        levelGraphicsTileSize,\r\n        levelGraphicsTileSize,\r\n        tilex / levelTileSize,\r\n        tiley / levelTileSize,\r\n        1,\r\n        1\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const drawAppleOnLevel = (\r\n  levelSize,\r\n  levelTileSize,\r\n  levelGraphics,\r\n  levelGraphicsTileSize,\r\n  drawingContext,\r\n  apple\r\n) => {\r\n  if (levelGraphics) {\r\n    drawingContext.drawImage(\r\n      levelGraphics,\r\n      0,\r\n      3 * levelGraphicsTileSize,\r\n      levelGraphicsTileSize,\r\n      levelGraphicsTileSize,\r\n      apple[0],\r\n      apple[1],\r\n      1,\r\n      1\r\n    )\r\n  }\r\n}\r\n","import useImage from \"use-image\"\r\n\r\nimport { drawSnakeOnLevel, drawAppleOnLevel } from \"utils/level.utils\"\r\n\r\nimport levelGraphicsPath from \"assets/snake-graphics.png\"\r\n\r\nconst useLevel = (levelSize, levelTileSize) => {\r\n  const [levelGraphics] = useImage(levelGraphicsPath)\r\n  const levelGraphicsTileSize = 64\r\n\r\n  const drawSnake = drawSnakeOnLevel.bind(\r\n    this,\r\n    levelSize,\r\n    levelTileSize,\r\n    levelGraphics,\r\n    levelGraphicsTileSize\r\n  )\r\n\r\n  const drawApple = drawAppleOnLevel.bind(\r\n    this,\r\n    levelSize,\r\n    levelTileSize,\r\n    levelGraphics,\r\n    levelGraphicsTileSize\r\n  )\r\n\r\n  return [drawSnake, drawApple]\r\n}\r\n\r\nexport default useLevel\r\n","import { useRef, useEffect } from \"react\"\r\n\r\nconst useCanvas = (canvasSize, canvasTileSize, callback) => {\r\n  const canvasRef = useRef()\r\n\r\n  useEffect(() => {\r\n    const context = canvasRef.current.getContext(\"2d\")\r\n    context.setTransform(canvasTileSize, 0, 0, canvasTileSize, 0, 0)\r\n    context.clearRect(0, 0, canvasSize[0], canvasSize[1])\r\n    callback(context)\r\n  }, [canvasSize, canvasTileSize, callback])\r\n\r\n  return canvasRef\r\n}\r\n\r\nexport default useCanvas\r\n","import React, { useContext } from \"react\"\r\n\r\nimport { SettingsContext } from \"contexts/SettingsContext\"\r\n\r\nimport useLevel from \"hooks/useLevel\"\r\nimport useCanvas from \"hooks/useCanvas\"\r\n\r\nconst Level = ({ snake, apple }) => {\r\n  const { levelSettings } = useContext(SettingsContext)\r\n\r\n  const [drawSnake, drawApple] = useLevel(\r\n    levelSettings.size,\r\n    levelSettings.tileSize\r\n  )\r\n\r\n  const canvasRef = useCanvas(\r\n    levelSettings.size,\r\n    levelSettings.tileSize,\r\n    (context) => {\r\n      drawApple(context, apple)\r\n      drawSnake(context, snake)\r\n    }\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={`${levelSettings.size[0]}px`}\r\n        height={`${levelSettings.size[1]}px`}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Level\r\n","// Custom Hook by Dan Abramov\r\nimport { useEffect, useRef } from \"react\"\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef()\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      savedCallback.current()\r\n    }\r\n\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay)\r\n      return () => clearInterval(id)\r\n    }\r\n  }, [delay])\r\n}\r\n\r\nexport default useInterval\r\n","import React, { useState, useContext } from \"react\"\r\n\r\nimport Level from \"components/Level\"\r\n\r\nimport { SettingsContext } from \"contexts/SettingsContext\"\r\n\r\nimport useInterval from \"hooks/useInterval\"\r\n\r\nconst DIRECTIONS = {\r\n  38: [0, -1], // up\r\n  40: [0, 1], // down\r\n  37: [-1, 0], // left\r\n  39: [1, 0], // right\r\n}\r\n\r\nconst SNAKE_START = [\r\n  [8, 10],\r\n  [8, 11],\r\n]\r\nconst APPLE_START = [8, 3]\r\nconst DIRECTION_START = DIRECTIONS[38]\r\n\r\nconst GAME_SPEED = 100\r\n\r\nconst Game = () => {\r\n  const { levelSettings } = useContext(SettingsContext)\r\n\r\n  const [snake, setSnake] = useState(SNAKE_START)\r\n  const [apple, setApple] = useState(APPLE_START)\r\n  const [direction, setDirection] = useState(DIRECTION_START)\r\n  const [speed, setSpeed] = useState(null)\r\n  const [gameStarted, setGameStarted] = useState(false)\r\n\r\n  const startGame = () => {\r\n    setSnake(SNAKE_START)\r\n    setApple(APPLE_START)\r\n    setDirection(DIRECTION_START)\r\n    setSpeed(GAME_SPEED)\r\n    setGameStarted(true)\r\n  }\r\n\r\n  const endGame = () => {\r\n    setSpeed(null)\r\n    setGameStarted(false)\r\n  }\r\n\r\n  const handleKeyPress = ({ keyCode }) => {\r\n    if (gameStarted) {\r\n      handleChangeSnakeDirection({ keyCode })\r\n    } else {\r\n      startGame()\r\n    }\r\n  }\r\n\r\n  const handleChangeSnakeDirection = ({ keyCode }) => {\r\n    // prevent movement with unallowed keys\r\n    if (keyCode < 37 || keyCode > 40) return\r\n\r\n    // prevent sudden movement in oposite direction\r\n    if (direction === DIRECTIONS[38] && keyCode === 40) return\r\n    if (direction === DIRECTIONS[40] && keyCode === 38) return\r\n    if (direction === DIRECTIONS[37] && keyCode === 39) return\r\n    if (direction === DIRECTIONS[39] && keyCode === 37) return\r\n\r\n    setDirection(DIRECTIONS[keyCode])\r\n  }\r\n\r\n  const createApple = (currentSnake) => {\r\n    const placeAppleOnRandomBlock = () => {\r\n      return apple.map((_, i) =>\r\n        Math.floor(\r\n          (Math.random() * levelSettings.size[i]) / levelSettings.tileSize\r\n        )\r\n      )\r\n    }\r\n\r\n    let newApple = null\r\n    do {\r\n      newApple = placeAppleOnRandomBlock()\r\n    } while (hasCollidedWithSnakeBody(newApple, currentSnake))\r\n\r\n    return newApple\r\n  }\r\n\r\n  const hasCollidedWithWall = (block) => {\r\n    return (\r\n      block[0] * levelSettings.tileSize >= levelSettings.size[0] ||\r\n      block[0] < 0 ||\r\n      block[1] * levelSettings.tileSize >= levelSettings.size[1] ||\r\n      block[1] < 0\r\n    )\r\n  }\r\n\r\n  const hasCollidedWithSnakeBody = (block, currentSnake = snake) => {\r\n    for (const segment of currentSnake)\r\n      if (block[0] === segment[0] && block[1] === segment[1]) return true\r\n  }\r\n\r\n  const hasEatenApple = (currentSnake) => {\r\n    return currentSnake[0][0] === apple[0] && currentSnake[0][1] === apple[1]\r\n  }\r\n\r\n  const deepClone = (obj) => JSON.parse(JSON.stringify(obj))\r\n\r\n  const run = () => {\r\n    const newSnake = deepClone(snake)\r\n\r\n    const newSnakeHead = [\r\n      newSnake[0][0] + direction[0],\r\n      newSnake[0][1] + direction[1],\r\n    ]\r\n    newSnake.unshift(newSnakeHead)\r\n\r\n    if (\r\n      hasCollidedWithWall(newSnakeHead) ||\r\n      hasCollidedWithSnakeBody(newSnakeHead)\r\n    ) {\r\n      endGame()\r\n    }\r\n\r\n    if (hasEatenApple(newSnake)) {\r\n      const newApple = createApple(newSnake)\r\n      setApple(newApple)\r\n    } else {\r\n      newSnake.pop()\r\n    }\r\n\r\n    setSnake(newSnake)\r\n  }\r\n\r\n  useInterval(() => run(), speed)\r\n\r\n  return (\r\n    <div\r\n      className=\"game-container\"\r\n      tabIndex=\"0\"\r\n      role=\"button\"\r\n      onKeyDown={handleKeyPress}\r\n      style={{\r\n        width: `${levelSettings.size[0] + 20}px`,\r\n        height: `${levelSettings.size[1] + 20}px`,\r\n      }}\r\n    >\r\n      <Level snake={snake} apple={apple} />\r\n      {!gameStarted && (\r\n        <div className=\"game-message\">PRESS ANY KEY TO START!</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game\r\n","import React from \"react\"\n\nimport Game from \"components/Game\"\n\nimport { SettingsContextProvider } from \"contexts/SettingsContext\"\n\nimport \"App.scss\"\n\nconst App = () => {\n  return (\n    <SettingsContextProvider>\n      <Game />\n    </SettingsContextProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"App\"\n\nimport * as serviceWorker from \"serviceWorker\"\n\nimport \"index.scss\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}